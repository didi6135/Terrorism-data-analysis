version: '3.8'

services:
  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    container_name: es-local-dev
    volumes:
      - dev-elasticsearch:/usr/share/elasticsearch/data
    ports:
      - 127.0.0.1:9200:9200
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=3uDiv6AS
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.license.self_generated.type=trial
      - xpack.ml.use_auto_machine_memory_percent=true
      - ES_JAVA_OPTS=-Xms128m -Xmx2g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: [ "CMD-SHELL", "curl --output /dev/null --silent --head --fail -u elastic:3uDiv6AS http://elasticsearch:9200" ]
      interval: 5s
      timeout: 5s
      retries: 10

  # Kibana Settings
  kibana_settings:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    container_name: kibana_settings
    restart: 'no'
    command: >
      bash -c '
        echo "Setup the kibana_system password";
        until curl -s -u "elastic:3uDiv6AS" -X POST http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"VEt4eHpa\"}" -H "Content-Type: application/json" | grep -q "^{}"; do sleep 5; done;
      '

  # Kibana
  kibana:
    depends_on:
      kibana_settings:
        condition: service_completed_successfully
    image: docker.elastic.co/kibana/kibana:8.15.2
    container_name: kibana-local-dev
    volumes:
      - dev-kibana:/usr/share/kibana/data
    ports:
      - 127.0.0.1:5601:5601
    environment:
      - SERVER_NAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=VEt4eHpa
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=z6Fz8UZZZVrZkYNwM3qnCi9oD9fquofJ
      - ELASTICSEARCH_PUBLICBASEURL=http://localhost:9200
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -I http://kibana:5601 | grep -q 'HTTP/1.1 302 Found'" ]
      interval: 10s
      timeout: 10s
      retries: 20

  # Zookeeper
  zk:
    image: confluentinc/cp-zookeeper:6.1.1
    hostname: zk
    container_name: zk
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Kafka Brokers
  broker0:
    image: confluentinc/cp-kafka:6.1.1
    hostname: broker0
    container_name: broker0
    depends_on:
      - zk
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: "zk:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker0:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3

  broker1:
    image: confluentinc/cp-kafka:6.1.1
    hostname: broker1
    container_name: broker1
    depends_on:
      - zk
    ports:
      - "29093:29093"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zk:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3

  broker2:
    image: confluentinc/cp-kafka:6.1.1
    hostname: broker2
    container_name: broker2
    depends_on:
      - zk
    ports:
      - "29094:29094"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zk:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3

  # Redis Stack
  redis-stack:
    image: redis/redis-stack:latest
    container_name: redis-stack
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - redis-data:/data


  # PostgreSQL
  postgres:
    image: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/data/db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 1234

volumes:
  dev-elasticsearch:
  dev-kibana:
  redis-data:
  postgres-data:
